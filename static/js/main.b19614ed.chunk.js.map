{"version":3,"sources":["common/constants/index.ts","common/reducers/index.ts","actionTypePrefixes.ts","details/constants/index.ts","details/reducers/currentLocation.ts","details/reducers/forecast.ts","details/reducers/conditions.ts","details/reducers/index.ts","favorites/constants/index.ts","favorites/reducers/index.ts","config/combineReducers.ts","config/api.ts","details/actions/index.ts","details/sagas/index.ts","favorites/sagas/index.ts","config/combineSagas.ts","config/combineMiddlewares.ts","common/components/Header/Header.tsx","common/actions/index.ts","accuIcons.ts","details/components/DailyWeatherCard/DailyWeatherCard.tsx","details/components/WeatherDetails/WeatherDetails.tsx","details/index.tsx","favorites/components/FavoriteCard/FavoriteCard.tsx","favorites/index.tsx","favorites/actions/index.ts","App.tsx","config/configureStore.ts","serviceWorker.ts","index.tsx"],"names":["SET_IS_TEMPERATURE_MODE_CELSIUS","INITIAL_STATE","isTemperatureModeCelsius","SET_CURRENT_LOCATION","CLEAR","GET_CURRENT_LOCATION_TRIGGER","PREFIXES","GET_CURRENT_LOCATION_REQUEST","GET_CURRENT_LOCATION_SUCCESS","GET_CURRENT_LOCATION_FAILURE","GET_CURRENT_LOCATION_FULFILL","GET_FORECAST_TRIGGER","GET_FORECAST_REQUEST","GET_FORECAST_SUCCESS","GET_FORECAST_FAILURE","GET_FORECAST_FULFILL","GET_CONDITIONS_TRIGGER","GET_CONDITIONS_REQUEST","GET_CONDITIONS_SUCCESS","GET_CONDITIONS_FAILURE","GET_CONDITIONS_FULFILL","error","isLoading","data","weatherDetailsReducer","combineReducers","currentLocation","state","action","type","weatherDetailsTypes","payload","detail","forecast","conditions","GET_LOCATIONS_CONDITIONS_TRIGGER","GET_LOCATIONS_CONDITIONS_REQUEST","GET_LOCATIONS_CONDITIONS_SUCCESS","GET_LOCATIONS_CONDITIONS_FAILURE","GET_LOCATIONS_CONDITIONS_FULFILL","common","commonTypes","weatherDetails","favorites","favoritesTypes","ACCU_WEATHER_API_URL","api","autocomplete","locationByKey","locationKey","forecast5days","setCurrentLocation","getForecast","meta","getConditions","getCurrentLocationSaga","watchGettingCurrentLocationSaga","getForecastSaga","watchGettingForecastSaga","getConditionsSaga","watchGettingConditionsSaga","put","config","params","apikey","process","language","call","axios","get","key","response","Key","takeLatest","metric","enhancedResponse","DailyForecasts","map","DailyForecast","Temperature","Minimum","ValueF","Value","Maximum","Metric","getLocationsConditionsSaga","watchGettingLocationsConditionsSaga","allArgs","reduce","acc","cur","locationName","all","responses","transformedResponses","LocalizedName","rootSaga","weatherDetailsSagaWatchers","favoritesSagaWatchers","sagaMiddleware","createSagaMiddleware","middlewares","ForwardedLink","React","forwardRef","props","ref","innerRef","useStyles","makeStyles","theme","createStyles","headerRoot","flexGrow","menuButton","marginRight","spacing","title","iconButton","margin","Header","classes","useSelector","dispatch","useDispatch","className","AppBar","position","Toolbar","Typography","variant","IconButton","disabled","onClick","color","ButtonGroup","size","Button","component","to","dailyForecastCardContent","display","flexDirection","alignItems","textAlign","padding","paddingBottom","cardMedia","width","height","DailyWeatherCard","Card","CardContent","moment","Date","format","CardMedia","alt","image","iconRefs","Day","Icon","IconPhrase","weatherDetailsRoot","minHeight","weatherDetailsContainer","weatherDetailsGridItem","maxWidth","cardRoot","cardContent","WeatherDetails","useState","isFavorited","setIsFavorited","useEffect","locationsData","localStorage","getItem","parsedData","JSON","parse","some","location","Paper","Grid","container","direction","item","xs","justify","WeatherIcon","Box","startIcon","dataToSave","splice","findIndex","push","setItem","stringify","WeatherText","dayForecast","index","defaultLocation","detailsRoot","autocompleteContainer","paddingTop","icon","palette","text","secondary","Details","inputValue","setInputValue","options","setOptions","useLocation","active","fetch","throttle","input","cb","a","q","console","log","handleChange","event","target","value","Autocomplete","id","defaultValue","getOptionLabel","option","filterOptions","autoComplete","includeInputInList","freeSolo","disableOpenOnFocus","onChange","renderInput","TextField","label","fullWidth","renderOption","favoriteCard","cursor","favoriteCardContent","FavoriteCard","history","useHistory","favoritesContainer","Favorites","getLocationsData","store","initialState","createStore","rootReducer","composeWithDevTools","applyMiddleware","configureStore","run","App","exact","path","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b19614ed.chunk.js","sourcesContent":["const NAMESPACE = 'COMMON'\n\nexport const SET_IS_TEMPERATURE_MODE_CELSIUS = `${NAMESPACE}:SET_IS_TEMPERATURE_MODE_CELSIUS`\n","import * as commonTypes from '../constants'\n\n\ntype StateType = {\n  isTemperatureModeCelsius: boolean\n}\n\nconst INITIAL_STATE = {\n  isTemperatureModeCelsius: true\n}\n\ntype ActionType = {\n  type: string\n  payload: {\n    isTemperatureModeCelsius: boolean\n  }\n}\n\nexport const commonReducer = ( state: StateType = INITIAL_STATE, action: ActionType ): StateType => {\n  switch ( action.type ) {\n    case commonTypes.SET_IS_TEMPERATURE_MODE_CELSIUS:\n      return {\n        ...state,\n        isTemperatureModeCelsius: action.payload.isTemperatureModeCelsius\n      }\n    default:\n      return state\n  }\n}\n","export default {\n  TRIGGER: 'TRIGGER',\n  REQUEST: 'REQUEST',\n  SUCCESS: 'SUCCESS',\n  FAILURE: 'FAILURE',\n  FULFILL: 'FULFILL'\n}\n","import PREFIXES from '../../actionTypePrefixes'\n\nconst NAMESPACE = 'WEATHER_DETAILS'\n\nexport const SET_CURRENT_LOCATION = `${NAMESPACE}:SET_CURRENT_LOCATION`\nexport const CLEAR = `${NAMESPACE}:CLEAR`\n\nexport const GET_CURRENT_LOCATION_TRIGGER = `${PREFIXES.TRIGGER}/${NAMESPACE}:GET_CURRENT_LOCATION`\nexport const GET_CURRENT_LOCATION_REQUEST = `${PREFIXES.REQUEST}/${NAMESPACE}:GET_CURRENT_LOCATION`\nexport const GET_CURRENT_LOCATION_SUCCESS = `${PREFIXES.SUCCESS}/${NAMESPACE}:GET_CURRENT_LOCATION`\nexport const GET_CURRENT_LOCATION_FAILURE = `${PREFIXES.FAILURE}/${NAMESPACE}:GET_CURRENT_LOCATION`\nexport const GET_CURRENT_LOCATION_FULFILL = `${PREFIXES.FULFILL}/${NAMESPACE}:GET_CURRENT_LOCATION`\n\nexport const GET_FORECAST_TRIGGER = `${PREFIXES.TRIGGER}/${NAMESPACE}:GET_FORECAST`\nexport const GET_FORECAST_REQUEST = `${PREFIXES.REQUEST}/${NAMESPACE}:GET_FORECAST`\nexport const GET_FORECAST_SUCCESS = `${PREFIXES.SUCCESS}/${NAMESPACE}:GET_FORECAST`\nexport const GET_FORECAST_FAILURE = `${PREFIXES.FAILURE}/${NAMESPACE}:GET_FORECAST`\nexport const GET_FORECAST_FULFILL = `${PREFIXES.FULFILL}/${NAMESPACE}:GET_FORECAST`\n\nexport const GET_CONDITIONS_TRIGGER = `${PREFIXES.TRIGGER}/${NAMESPACE}:GET_CONDITIONS`\nexport const GET_CONDITIONS_REQUEST = `${PREFIXES.REQUEST}/${NAMESPACE}:GET_CONDITIONS`\nexport const GET_CONDITIONS_SUCCESS = `${PREFIXES.SUCCESS}/${NAMESPACE}:GET_CONDITIONS`\nexport const GET_CONDITIONS_FAILURE = `${PREFIXES.FAILURE}/${NAMESPACE}:GET_CONDITIONS`\nexport const GET_CONDITIONS_FULFILL = `${PREFIXES.FULFILL}/${NAMESPACE}:GET_CONDITIONS`\n","import * as weatherDetailsTypes from '../constants'\n\n\ntype StateType = {\n  error: null | string\n  isLoading: boolean\n  data: any\n}\n\nconst INITIAL_STATE = {\n  error: null,\n  isLoading: true,\n  data: null\n}\n\ntype ActionType = {\n  type: string\n  payload: any\n}\n\nexport const currentLocationReducer = ( state: StateType = INITIAL_STATE, action: ActionType ): StateType => {\n  switch ( action.type ) {\n    case weatherDetailsTypes.GET_CURRENT_LOCATION_REQUEST:\n      return {\n        ...state,\n        isLoading: true\n      }\n    case weatherDetailsTypes.GET_CURRENT_LOCATION_SUCCESS:\n      return {\n        ...state,\n        data: action.payload,\n        error: null\n      }\n    case weatherDetailsTypes.GET_CURRENT_LOCATION_FAILURE:\n      return {\n        ...state,\n        error: action.payload.detail\n      }\n    case weatherDetailsTypes.GET_CURRENT_LOCATION_FULFILL:\n      return {\n        ...state,\n        isLoading: false\n      }\n    case weatherDetailsTypes.SET_CURRENT_LOCATION:\n      return {\n        ...state,\n        isLoading: false,\n        data: action.payload,\n        error: null\n      }\n    case weatherDetailsTypes.CLEAR:\n      return {\n        ...INITIAL_STATE\n      }\n    default:\n      return state\n  }\n}\n","import * as weatherDetailsTypes from '../constants'\n\n\ntype StateType = {\n  error: null | string\n  isLoading: boolean\n  data: any\n}\n\nconst INITIAL_STATE = {\n  error: null,\n  isLoading: true,\n  data: null\n}\n\ntype ActionType = {\n  type: string\n  payload: any\n}\n\nexport const forecastReducer = ( state: StateType = INITIAL_STATE, action: ActionType ): StateType => {\n  switch ( action.type ) {\n    case weatherDetailsTypes.GET_FORECAST_REQUEST:\n      return {\n        ...state,\n        isLoading: true\n      }\n    case weatherDetailsTypes.GET_FORECAST_SUCCESS:\n      return {\n        ...state,\n        data: action.payload,\n        error: null\n      }\n    case weatherDetailsTypes.GET_FORECAST_FAILURE:\n      return {\n        ...state,\n        error: action.payload.detail\n      }\n    case weatherDetailsTypes.GET_FORECAST_FULFILL:\n      return {\n        ...state,\n        isLoading: false\n      }\n    case weatherDetailsTypes.CLEAR:\n      return {\n        ...INITIAL_STATE\n      }\n    default:\n      return state\n  }\n}\n","import * as weatherDetailsTypes from '../constants'\n\n\ntype StateType = {\n  error: null | string\n  isLoading: boolean\n  data: any\n}\n\nconst INITIAL_STATE = {\n  error: null,\n  isLoading: true,\n  data: null\n}\n\ntype ActionType = {\n  type: string\n  payload: any\n}\n\nexport const conditionsReducer = ( state: StateType = INITIAL_STATE, action: ActionType ): StateType => {\n  switch ( action.type ) {\n    case weatherDetailsTypes.GET_CONDITIONS_REQUEST:\n      return {\n        ...state,\n        isLoading: true\n      }\n    case weatherDetailsTypes.GET_CONDITIONS_SUCCESS:\n      return {\n        ...state,\n        data: action.payload,\n        error: null\n      }\n    case weatherDetailsTypes.GET_CONDITIONS_FAILURE:\n      return {\n        ...state,\n        error: action.payload.detail\n      }\n    case weatherDetailsTypes.GET_CONDITIONS_FULFILL:\n      return {\n        ...state,\n        isLoading: false\n      }\n    case weatherDetailsTypes.CLEAR:\n      return {\n        ...INITIAL_STATE\n      }\n    default:\n      return state\n  }\n}\n","import { combineReducers } from 'redux'\n\nimport { currentLocationReducer } from './currentLocation'\nimport { forecastReducer } from './forecast'\nimport { conditionsReducer } from './conditions'\n\n\nexport const weatherDetailsReducer = combineReducers( {\n  currentLocation: currentLocationReducer,\n  forecast: forecastReducer,\n  conditions: conditionsReducer\n} )\n","import PREFIXES from '../../actionTypePrefixes'\n\nconst NAMESPACE = 'FAVORITES'\n\nexport const GET_LOCATIONS_CONDITIONS_TRIGGER = `${PREFIXES.TRIGGER}/${NAMESPACE}:GET_LOCATIONS_CONDITIONS`\nexport const GET_LOCATIONS_CONDITIONS_REQUEST = `${PREFIXES.REQUEST}/${NAMESPACE}:GET_LOCATIONS_CONDITIONS`\nexport const GET_LOCATIONS_CONDITIONS_SUCCESS = `${PREFIXES.SUCCESS}/${NAMESPACE}:GET_LOCATIONS_CONDITIONS`\nexport const GET_LOCATIONS_CONDITIONS_FAILURE = `${PREFIXES.FAILURE}/${NAMESPACE}:GET_LOCATIONS_CONDITIONS`\nexport const GET_LOCATIONS_CONDITIONS_FULFILL = `${PREFIXES.FULFILL}/${NAMESPACE}:GET_LOCATIONS_CONDITIONS`\n","import * as favoritesTypes from '../constants'\n\n\ntype StateType = {\n  error: null | string\n  isLoading: boolean\n  data: any\n}\n\nconst INITIAL_STATE = {\n  error: null,\n  isLoading: true,\n  data: null\n}\n\ntype ActionType = {\n  type: string\n  payload: any\n}\n\nexport const favoritesReducer = ( state: StateType = INITIAL_STATE, action: ActionType ): StateType => {\n  switch ( action.type ) {\n    case favoritesTypes.GET_LOCATIONS_CONDITIONS_REQUEST:\n      return {\n        ...state,\n        isLoading: true\n      }\n    case favoritesTypes.GET_LOCATIONS_CONDITIONS_SUCCESS:\n      return {\n        ...state,\n        data: action.payload,\n        error: null\n      }\n    case favoritesTypes.GET_LOCATIONS_CONDITIONS_FAILURE:\n      return {\n        ...state,\n        error: action.payload.detail\n      }\n    case favoritesTypes.GET_LOCATIONS_CONDITIONS_FULFILL:\n      return {\n        ...state,\n        isLoading: false\n      }\n    default:\n      return state\n  }\n}\n","import { combineReducers } from 'redux'\n\nimport { commonReducer } from '../common/reducers'\nimport { weatherDetailsReducer } from '../details/reducers'\nimport { favoritesReducer } from '../favorites/reducers'\n\n\nexport default combineReducers( {\n  common: commonReducer,\n  weatherDetails: weatherDetailsReducer,\n  favorites: favoritesReducer\n} )\n","const ACCU_WEATHER_API_URL = 'https://dataservice.accuweather.com'\n\nexport const api = {\n  autocomplete: `${ACCU_WEATHER_API_URL}/locations/v1/cities/autocomplete`,\n  locationByKey: ( locationKey: string ) => `${ACCU_WEATHER_API_URL}/locations/v1/${locationKey}`,\n  forecast5days: ( locationKey: string ) => `${ACCU_WEATHER_API_URL}/forecasts/v1/daily/5day/${locationKey}`,\n  conditions: ( locationKey: string ) => `${ACCU_WEATHER_API_URL}/currentconditions/v1/${locationKey}`\n}\n","import * as weatherDetailsTypes from '../constants'\n\n\nexport function getCurrentLocation( payload: any, meta: any ) {\n  return {\n    type: weatherDetailsTypes.GET_CURRENT_LOCATION_TRIGGER,\n    payload,\n    meta\n  }\n}\n\nexport function setCurrentLocation( payload: any ) {\n  return {\n    type: weatherDetailsTypes.SET_CURRENT_LOCATION,\n    payload\n  }\n}\n\nexport function getForecast( payload: any, meta: any ) {\n  return {\n    type: weatherDetailsTypes.GET_FORECAST_TRIGGER,\n    payload,\n    meta\n  }\n}\n\nexport function getConditions( payload: any, meta: any ) {\n  return {\n    type: weatherDetailsTypes.GET_CONDITIONS_TRIGGER,\n    payload,\n    meta\n  }\n}\n\nexport function clear() {\n  return {\n    type: weatherDetailsTypes.CLEAR\n  }\n}\n","import {\n  put,\n  call,\n  takeLatest\n} from 'redux-saga/effects'\nimport axios from 'axios'\n\nimport { api } from '../../config/api'\n\nimport * as weatherDetailsTypes from '../constants'\n\nimport {\n  getConditions,\n  getForecast\n} from '../actions'\n\n\nexport function* getCurrentLocationSaga( action: any ) {\n  try {\n    yield put( { type: weatherDetailsTypes.GET_CURRENT_LOCATION_REQUEST } )\n    const config = {\n      params: {\n        apikey: process.env.REACT_APP_ACCU_WEATHER_KEY,\n        language: 'en-us'\n      }\n    }\n    const response = yield call( axios.get, api.locationByKey( action.payload.key ), config )\n    yield put( { type: weatherDetailsTypes.GET_CURRENT_LOCATION_SUCCESS, payload: response.data } )\n\n    yield put( getForecast( { key: response.data.Key }, action.meta ) )\n    yield put( getConditions( { key: response.data.Key }, action.meta ) )\n  } catch ( error ) {\n    if ( error.response ) {\n      yield put( { type: weatherDetailsTypes.GET_CURRENT_LOCATION_FAILURE, payload: error.response.data } )\n    }\n  } finally {\n    yield put( { type: weatherDetailsTypes.GET_CURRENT_LOCATION_FULFILL } )\n  }\n}\n\nexport function* watchGettingCurrentLocationSaga() {\n  yield takeLatest( weatherDetailsTypes.GET_CURRENT_LOCATION_TRIGGER, getCurrentLocationSaga )\n}\n\nexport function* getForecastSaga( action: any ) {\n  try {\n    yield put( { type: weatherDetailsTypes.GET_FORECAST_REQUEST } )\n    const config = {\n      params: {\n        apikey: process.env.REACT_APP_ACCU_WEATHER_KEY,\n        language: 'en-us',\n        metric: true\n      }\n    }\n    const response = yield call( axios.get, api.forecast5days( action.payload.key ), config )\n    const enhancedResponse = response.data.DailyForecasts.map( ( DailyForecast: any ) => ( {\n      ...DailyForecast,\n      Temperature: {\n        Minimum: {\n          ...DailyForecast.Temperature.Minimum,\n          ValueF: ( ( DailyForecast.Temperature.Minimum.Value * 1.8 ) + 32 )\n        },\n        Maximum: {\n          ...DailyForecast.Temperature.Maximum,\n          ValueF: ( ( DailyForecast.Temperature.Minimum.Value * 1.8 ) + 32 )\n        }\n      }\n    } ) )\n    yield put( { type: weatherDetailsTypes.GET_FORECAST_SUCCESS, payload: enhancedResponse } )\n  } catch ( error ) {\n    if ( error.response ) {\n      yield put( { type: weatherDetailsTypes.GET_FORECAST_FAILURE, payload: error.response.data } )\n    }\n  } finally {\n    yield put( { type: weatherDetailsTypes.GET_FORECAST_FULFILL } )\n  }\n}\n\nexport function* watchGettingForecastSaga() {\n  yield takeLatest( weatherDetailsTypes.GET_FORECAST_TRIGGER, getForecastSaga )\n}\n\nexport function* getConditionsSaga( action: any ) {\n  try {\n    yield put( { type: weatherDetailsTypes.GET_CONDITIONS_REQUEST } )\n    const config = {\n      params: {\n        apikey: process.env.REACT_APP_ACCU_WEATHER_KEY,\n        language: 'en-us'\n      }\n    }\n    const response = yield call( axios.get, api.conditions( action.payload.key ), config )\n    yield put( { type: weatherDetailsTypes.GET_CONDITIONS_SUCCESS, payload: {\n      ...response.data[0],\n      Temperature: {\n        Metric: {\n          ...response.data[0].Temperature.Metric,\n          ValueF: ( ( response.data[0].Temperature.Metric.Value * 1.8 ) + 32 )\n        }\n      }\n    } } )\n  } catch ( error ) {\n    if ( error.response ) {\n      yield put( { type: weatherDetailsTypes.GET_CONDITIONS_FAILURE, payload: error.response.data } )\n    }\n  } finally {\n    yield put( { type: weatherDetailsTypes.GET_CONDITIONS_FULFILL } )\n  }\n}\n\nexport function* watchGettingConditionsSaga() {\n  yield takeLatest( weatherDetailsTypes.GET_CONDITIONS_TRIGGER, getConditionsSaga )\n}\n\nexport default [\n  watchGettingCurrentLocationSaga(),\n  watchGettingForecastSaga(),\n  watchGettingConditionsSaga()\n]\n","import {\n  put,\n  call,\n  all,\n  takeLatest\n} from 'redux-saga/effects'\nimport axios from 'axios'\n\nimport { api } from '../../config/api'\n\nimport * as favoritesTypes from '../constants'\n\n\nexport function* getLocationsConditionsSaga( action: any ) {\n  try {\n    yield put( { type: favoritesTypes.GET_LOCATIONS_CONDITIONS_REQUEST } )\n    const config = {\n      params: {\n        apikey: process.env.REACT_APP_ACCU_WEATHER_KEY,\n        language: 'en-us'\n      }\n    }\n    const allArgs = action.payload.reduce( ( acc: any, cur: any ) => ( { ...acc, [cur.locationName]: call( axios.get, api.conditions( cur.locationKey ), config ) } ), {} )\n    const responses = yield all( allArgs )\n    const transformedResponses = action.payload.map( ( { locationName, locationKey }: any ) => ( { LocalizedName: locationName, Key: locationKey, ...responses[locationName].data[0] } ) )\n    yield put( { type: favoritesTypes.GET_LOCATIONS_CONDITIONS_SUCCESS, payload: transformedResponses.map( ( conditions: any ) => ( {\n      ...conditions,\n      Temperature: {\n        Metric: {\n          ...conditions.Temperature.Metric,\n          ValueF: ( ( conditions.Temperature.Metric.Value * 1.8 ) + 32 )\n        }\n      }\n    } ) ) } )\n  } catch ( error ) {\n    if ( error.response ) {\n      yield put( { type: favoritesTypes.GET_LOCATIONS_CONDITIONS_FAILURE, payload: error.response.data } )\n    }\n  } finally {\n    yield put( { type: favoritesTypes.GET_LOCATIONS_CONDITIONS_FULFILL } )\n  }\n}\n\nexport function* watchGettingLocationsConditionsSaga() {\n  yield takeLatest( favoritesTypes.GET_LOCATIONS_CONDITIONS_TRIGGER, getLocationsConditionsSaga )\n}\n\nexport default [\n  watchGettingLocationsConditionsSaga()\n]\n","import { all } from 'redux-saga/effects'\n\nimport weatherDetailsSagaWatchers from '../details/sagas'\nimport favoritesSagaWatchers from '../favorites/sagas'\n\n\nexport default function* rootSaga() {\n  yield all( [\n    ...weatherDetailsSagaWatchers,\n    ...favoritesSagaWatchers\n  ] )\n}\n","import createSagaMiddleware from 'redux-saga'\n\nimport rootSaga from './combineSagas'\n\n\nconst sagaMiddleware = createSagaMiddleware()\nlet middlewares = [ sagaMiddleware ]\n\nexport const runSaga = () => sagaMiddleware.run( rootSaga )\n\nexport default middlewares\n","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { Link, LinkProps } from 'react-router-dom'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\nimport Button from '@material-ui/core/Button'\nimport ButtonGroup from '@material-ui/core/ButtonGroup'\nimport IconButton from '@material-ui/core/IconButton'\nimport Brightness6TwoToneIcon from '@material-ui/icons/Brightness6TwoTone'\nimport AcUnitTwoToneIcon from '@material-ui/icons/AcUnitTwoTone'\n\nimport { setIsTemperatureModeCelsius } from '../../actions'\n\nimport {\n  createStyles,\n  makeStyles,\n  Theme\n} from '@material-ui/core/styles'\n\n\nconst ForwardedLink = React.forwardRef<HTMLAnchorElement, LinkProps>( ( props, ref ) => (\n  <Link innerRef={ ref } { ...props } />\n) )\n\nconst useStyles = makeStyles( ( theme: Theme ) =>\n  createStyles( {\n    headerRoot: {\n      flexGrow: 1\n    },\n    menuButton: {\n      marginRight: theme.spacing( 2 )\n    },\n    title: {\n      flexGrow: 1\n    },\n    iconButton: {\n      margin: theme.spacing( 0 ),\n      '&:last-of-type': {\n        marginRight: theme.spacing( 2 )\n      }\n    }\n  } ),\n)\n\nconst Header: React.FC = () => {\n  const classes = useStyles()\n  const isTemperatureModeCelsius = useSelector<any, any>( ( { common }: any ) => common.isTemperatureModeCelsius )\n  const dispatch = useDispatch()\n\n  const handleTemperatureModeChange = () => {\n    dispatch( setIsTemperatureModeCelsius( { isTemperatureModeCelsius: !isTemperatureModeCelsius } ) )\n  }\n\n  return (\n    <div className={ classes.headerRoot }>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={ classes.title }>\n            Herolo Weather Task\n          </Typography>\n          <IconButton disabled className={ classes.iconButton }>\n            <Brightness6TwoToneIcon />\n          </IconButton>\n          <IconButton\n            className={ classes.iconButton }\n            onClick={ handleTemperatureModeChange }\n          >\n            <AcUnitTwoToneIcon color={ 'secondary' } />\n          </IconButton>\n          <ButtonGroup\n            variant=\"contained\"\n            color=\"primary\"\n            size=\"large\"\n          >\n            <Button component={ ForwardedLink } to=\"/\">\n              Home\n            </Button>\n            <Button component={ ForwardedLink } to=\"/favorites\">\n              Favorites\n            </Button>\n          </ButtonGroup>\n        </Toolbar>\n      </AppBar>\n    </div>\n  )\n}\n\nexport default Header\n","import * as commonTypes from '../constants'\n\n\nexport function setIsTemperatureModeCelsius( payload: { isTemperatureModeCelsius: boolean } ) {\n  return {\n    type: commonTypes.SET_IS_TEMPERATURE_MODE_CELSIUS,\n    payload\n  }\n}\n","export default {\n  '1': 'https://developer.accuweather.com/sites/default/files/01-s.png',\n  '2': 'https://developer.accuweather.com/sites/default/files/02-s.png',\n  '3': 'https://developer.accuweather.com/sites/default/files/03-s.png',\n  '4': 'https://developer.accuweather.com/sites/default/files/04-s.png',\n  '5': 'https://developer.accuweather.com/sites/default/files/05-s.png',\n  '6': 'https://developer.accuweather.com/sites/default/files/06-s.png',\n  '7': 'https://developer.accuweather.com/sites/default/files/07-s.png',\n  '8': 'https://developer.accuweather.com/sites/default/files/08-s.png',\n  '11': 'https://developer.accuweather.com/sites/default/files/11-s.png',\n  '12': 'https://developer.accuweather.com/sites/default/files/12-s.png',\n  '13': 'https://developer.accuweather.com/sites/default/files/13-s.png',\n  '14': 'https://developer.accuweather.com/sites/default/files/14-s.png',\n  '15': 'https://developer.accuweather.com/sites/default/files/15-s.png',\n  '16': 'https://developer.accuweather.com/sites/default/files/16-s.png',\n  '17': 'https://developer.accuweather.com/sites/default/files/17-s.png',\n  '18': 'https://developer.accuweather.com/sites/default/files/18-s.png',\n  '19': 'https://developer.accuweather.com/sites/default/files/19-s.png',\n  '20': 'https://developer.accuweather.com/sites/default/files/20-s.png',\n  '21': 'https://developer.accuweather.com/sites/default/files/21-s.png',\n  '22': 'https://developer.accuweather.com/sites/default/files/22-s.png',\n  '23': 'https://developer.accuweather.com/sites/default/files/23-s.png',\n  '24': 'https://developer.accuweather.com/sites/default/files/24-s.png',\n  '25': 'https://developer.accuweather.com/sites/default/files/25-s.png',\n  '26': 'https://developer.accuweather.com/sites/default/files/26-s.png',\n  '29': 'https://developer.accuweather.com/sites/default/files/29-s.png',\n  '30': 'https://developer.accuweather.com/sites/default/files/30-s.png',\n  '31': 'https://developer.accuweather.com/sites/default/files/31-s.png',\n  '32': 'https://developer.accuweather.com/sites/default/files/32-s.png',\n  '33': 'https://developer.accuweather.com/sites/default/files/33-s.png',\n  '34': 'https://developer.accuweather.com/sites/default/files/34-s.png',\n  '35': 'https://developer.accuweather.com/sites/default/files/35-s.png',\n  '36': 'https://developer.accuweather.com/sites/default/files/36-s.png',\n  '37': 'https://developer.accuweather.com/sites/default/files/37-s.png',\n  '38': 'https://developer.accuweather.com/sites/default/files/38-s.png',\n  '39': 'https://developer.accuweather.com/sites/default/files/39-s.png',\n  '40': 'https://developer.accuweather.com/sites/default/files/40-s.png',\n  '41': 'https://developer.accuweather.com/sites/default/files/41-s.png',\n  '42': 'https://developer.accuweather.com/sites/default/files/42-s.png',\n  '43': 'https://developer.accuweather.com/sites/default/files/43-s.png',\n  '44': 'https://developer.accuweather.com/sites/default/files/44-s.png'\n}\n","import React from 'react'\nimport Card from '@material-ui/core/Card'\nimport CardContent from '@material-ui/core/CardContent'\nimport CardMedia from '@material-ui/core/CardMedia'\nimport Typography from '@material-ui/core/Typography'\n\nimport moment from 'moment'\n\nimport iconRefs from '../../../accuIcons'\n\nimport {\n  makeStyles,\n  createStyles,\n  Theme\n} from '@material-ui/core/styles'\n\n\nconst useStyles = makeStyles( ( theme: Theme ) =>\n  createStyles( {\n    dailyForecastCardContent: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      textAlign: 'center',\n      padding: theme.spacing( 2 ),\n      '&:last-child': {\n        paddingBottom: theme.spacing( 2 )\n      }\n    },\n    cardMedia: {\n      width: 70,\n      height: 70\n    }\n  } )\n)\n\nconst DailyWeatherCard: React.FC<any> = ( { forecast, isTemperatureModeCelsius }: any ) => {\n  const classes = useStyles()\n\n  return (\n    <Card>\n      <CardContent className={ classes.dailyForecastCardContent }>\n        <Typography variant=\"h6\">\n          { moment( forecast.Date ).format( 'ddd' ) }\n        </Typography>\n        <CardMedia\n          className={ classes.cardMedia }\n          component=\"img\"\n          alt=\"Some img\"\n          // @ts-ignore\n          image={ iconRefs[forecast.Day.Icon] }\n          title=\"Some img\"\n        />\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n          { forecast.Day.IconPhrase }\n        </Typography>\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n          {\n            isTemperatureModeCelsius\n              ? `${forecast.Temperature.Minimum.Value} - ${forecast.Temperature.Maximum.Value} C`\n              : `${forecast.Temperature.Minimum.ValueF} - ${forecast.Temperature.Maximum.ValueF} F`\n          }\n        </Typography>\n      </CardContent>\n    </Card>\n  )\n}\n\nexport default DailyWeatherCard\n","import React, { useState, useEffect } from 'react'\nimport Paper from '@material-ui/core/Paper'\nimport Grid from '@material-ui/core/Grid'\nimport Box from '@material-ui/core/Box'\nimport Card from '@material-ui/core/Card'\nimport CardMedia from '@material-ui/core/CardMedia'\nimport CardContent from '@material-ui/core/CardContent'\nimport Typography from '@material-ui/core/Typography'\nimport Button from '@material-ui/core/Button'\nimport FavoriteIcon from '@material-ui/icons/Favorite'\n\nimport DailyWeatherCard from '../DailyWeatherCard'\n\nimport {\n  makeStyles,\n  createStyles,\n  Theme\n} from '@material-ui/core/styles'\n\nimport iconRefs from '../../../accuIcons'\n\n\nconst useStyles = makeStyles( ( theme: Theme ) =>\n  createStyles( {\n    weatherDetailsRoot: {\n      minHeight: 300\n    },\n    weatherDetailsContainer: {\n      height: '100%'\n    },\n    weatherDetailsGridItem: {\n      padding: theme.spacing( 2 ),\n      maxWidth: '100%'\n    },\n    cardRoot: {\n      display: 'flex'\n    },\n    cardMedia: {\n      width: 70,\n      height: 70\n    },\n    cardContent: {\n      padding: theme.spacing( 1 ),\n      '&:last-child': {\n        paddingBottom: theme.spacing( 1 )\n      }\n    }\n  } )\n)\n\nconst WeatherDetails: React.FC<any> = ( {\n  currentLocation,\n  forecast,\n  conditions,\n  isTemperatureModeCelsius\n}: any ) => {\n  const classes = useStyles()\n  const [isFavorited, setIsFavorited] = useState( false )\n\n  useEffect( () => {\n    const locationsData = localStorage.getItem( 'locationsData' )\n    if ( locationsData ) {\n      let parsedData: any[] = JSON.parse( locationsData )\n      setIsFavorited( parsedData.some( ( location: any ) => currentLocation.LocalizedName === location.locationName ) )\n    }\n  }, [currentLocation] )\n\n  const handleAddToFavoritesClick = () => {\n    const locationsData = localStorage.getItem( 'locationsData' )\n    const dataToSave = {\n      locationName: currentLocation.LocalizedName,\n      locationKey: currentLocation.Key\n    }\n    if ( locationsData ) {\n      let parsedData: any[] = JSON.parse( locationsData )\n      if ( isFavorited ) {\n        parsedData.splice( parsedData.findIndex( ( location: any ) => currentLocation.LocalizedName === location.locationName ), 1 )\n        setIsFavorited( false )\n      } else {\n        parsedData.push( dataToSave )\n        setIsFavorited( true )\n      }\n      localStorage.setItem( 'locationsData', JSON.stringify( parsedData ) )\n    } else {\n      localStorage.setItem( 'locationsData', JSON.stringify( [dataToSave] ) )\n    }\n  }\n\n  return (\n    <Paper className={ classes.weatherDetailsRoot }>\n      <Grid className={ classes.weatherDetailsContainer } container direction=\"column\">\n        <Grid className={ classes.weatherDetailsGridItem } item container xs={ 3 } justify=\"space-between\">\n          <Card className={ classes.cardRoot }>\n            <CardMedia\n              className={ classes.cardMedia }\n              component=\"img\"\n              alt=\"Some img\"\n              // @ts-ignore\n              image={ iconRefs[conditions.WeatherIcon] }\n              title=\"Some img\"\n            />\n            <CardContent className={ classes.cardContent }>\n              <Typography variant=\"h6\">\n                { currentLocation.LocalizedName }\n              </Typography>\n              <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                {\n                  isTemperatureModeCelsius\n                    ? `${conditions.Temperature.Metric.Value} C`\n                    : `${conditions.Temperature.Metric.ValueF} F`\n                }\n              </Typography>\n            </CardContent>\n          </Card>\n          <Box>\n            <Button\n              variant=\"contained\"\n              color={ isFavorited ? 'inherit' : 'secondary' }\n              size=\"large\"\n              startIcon={ <FavoriteIcon color={ isFavorited ? 'disabled' : 'inherit' } /> }\n              onClick={ handleAddToFavoritesClick }\n            >\n              { isFavorited ? 'Remove from Favorites' : 'Add to Favorites' }\n            </Button>\n          </Box>\n        </Grid>\n        <Grid className={ classes.weatherDetailsGridItem } item container xs={ 4 } justify=\"center\" alignItems=\"center\">\n          <Typography variant=\"h3\">\n            { conditions.WeatherText }\n          </Typography>\n        </Grid>\n        <Grid className={ classes.weatherDetailsGridItem } item container xs={ 5 } justify=\"space-around\" alignItems=\"center\">\n          {\n            forecast.map( ( dayForecast: any, index: number ) => (\n              <DailyWeatherCard\n                key={ `forecast_${index}` }\n                forecast={ dayForecast }\n                isTemperatureModeCelsius={ isTemperatureModeCelsius }\n              />\n            ) )\n          }\n        </Grid>\n      </Grid>\n    </Paper>\n  )\n}\n\nexport default WeatherDetails\n","import React, { useEffect } from 'react'\nimport { useLocation } from 'react-router-dom'\nimport { useSelector, useDispatch } from 'react-redux'\nimport TextField from '@material-ui/core/TextField'\nimport Autocomplete from '@material-ui/lab/Autocomplete'\nimport LocationOnIcon from '@material-ui/icons/LocationOn'\nimport Typography from '@material-ui/core/Typography'\nimport Grid from '@material-ui/core/Grid'\n\nimport WeatherDetails from './components/WeatherDetails'\n\nimport throttle from 'lodash/throttle'\n\nimport {\n  getCurrentLocation,\n  setCurrentLocation,\n  getForecast,\n  getConditions,\n  clear\n} from './actions'\n\nimport { api } from '../config/api'\n\nimport axios from 'axios'\n\nimport {\n  makeStyles,\n  createStyles,\n  Theme\n} from '@material-ui/core/styles'\n\n\nconst defaultLocation = { LocalizedName: 'Tel Aviv', Key: 215854 }\n\nconst useStyles = makeStyles( ( theme: Theme ) =>\n  createStyles( {\n    detailsRoot: {\n      flexGrow: 1\n    },\n    autocompleteContainer: {\n      paddingTop: theme.spacing( 3 ),\n      paddingBottom: theme.spacing( 3 )\n    },\n    icon: {\n      color: theme.palette.text.secondary,\n      marginRight: theme.spacing( 2 )\n    }\n  } )\n)\n\ninterface PlaceType {}\n\nconst Details: React.FC = () => {\n  const classes = useStyles()\n  const [inputValue, setInputValue] = React.useState( '' )\n  const [options, setOptions] = React.useState<PlaceType[]>( [] )\n  const {\n    isTemperatureModeCelsius,\n    currentLocation,\n    forecast,\n    conditions\n  } = useSelector( ( { weatherDetails, common }: any ) => ( {\n    isTemperatureModeCelsius: common.isTemperatureModeCelsius,\n    currentLocation: weatherDetails.currentLocation,\n    forecast: weatherDetails.forecast,\n    conditions: weatherDetails.conditions\n  } ) )\n  // const forecast = useSelector( ( { weatherDetails }: any ) => weatherDetails.forecast )\n  // const conditions = useSelector( ( { weatherDetails }: any ) => weatherDetails.conditions )\n  const dispatch = useDispatch()\n  const location = useLocation()\n\n  useEffect( () => {\n    if ( location.state ) {\n      dispatch( setCurrentLocation( location.state ) )\n      dispatch( getForecast( { key: location.state.Key }, { isTemperatureModeCelsius } ) )\n      dispatch( getConditions( { key: location.state.Key }, { isTemperatureModeCelsius } ) )\n    } else {\n      dispatch( getCurrentLocation( { key: defaultLocation.Key }, { isTemperatureModeCelsius } ) )\n    }\n  }, [] )\n\n  useEffect( () => {\n    let active = true\n\n    const fetch = throttle( async ( input: string, cb: ( response: any ) => void ) => {\n      try {\n        const response = await axios.get( api.autocomplete, {\n          params: {\n            apikey: process.env.REACT_APP_ACCU_WEATHER_KEY,\n            q: input,\n            language: 'en-us'\n          }\n        } )\n        cb( response )\n      } catch ( e ) {\n        console.log( e )\n      }\n    }, 200 )\n\n    if ( inputValue === '' ) {\n      setOptions( [] )\n      return\n    }\n\n    fetch( inputValue, ( response: any ) => {\n      if ( active ) {\n        setOptions( response.data || [] )\n      }\n    } )\n\n    return () => {\n      active = false\n    }\n  }, [inputValue] )\n\n  const handleChange = ( event: React.ChangeEvent<HTMLInputElement> ) => {\n    setInputValue( event.target.value )\n  }\n\n  const handleCityAccept = ( event: any, option: any ): void => {\n    if ( option ) {\n      dispatch( setCurrentLocation( option ) )\n      dispatch( getForecast( { key: option.Key }, { isTemperatureModeCelsius } ) )\n      dispatch( getConditions( { key: option.Key }, { isTemperatureModeCelsius } ) )\n    } else {\n      dispatch( clear() )\n    }\n  }\n\n  return (\n    <Grid container className={ classes.detailsRoot } justify=\"center\">\n      <Grid className={ classes.autocompleteContainer } item xs={ 10 }>\n        <Autocomplete\n          id=\"autocomplete\"\n          defaultValue={ location.state || defaultLocation }\n          getOptionLabel={ option => option.LocalizedName }\n          filterOptions={ options => options }\n          options={ options }\n          autoComplete\n          includeInputInList\n          freeSolo\n          disableOpenOnFocus\n          onChange={ handleCityAccept }\n          renderInput={ params => {\n            return (\n              <TextField\n                { ...params }\n                label=\"Add a location\"\n                variant=\"outlined\"\n                fullWidth\n                onChange={ handleChange }\n              />\n            )\n          } }\n          renderOption={ option => {\n            return (\n              <Grid container alignItems=\"center\">\n                <Grid item>\n                  <LocationOnIcon className={ classes.icon } />\n                </Grid>\n                <Grid item xs>\n                  <Typography variant=\"body2\" color=\"textSecondary\">\n                    { option.LocalizedName }\n                  </Typography>\n                </Grid>\n              </Grid>\n            )\n          } }\n        />\n      </Grid>\n      {\n        currentLocation.data && forecast.data && conditions.data ? (\n          <Grid item xs={ 10 }>\n            <WeatherDetails\n              currentLocation={ currentLocation.data }\n              forecast={ forecast.data }\n              conditions={ conditions.data }\n              isTemperatureModeCelsius={ isTemperatureModeCelsius }\n            />\n          </Grid>\n        ) : null\n      }\n    </Grid>\n  )\n}\n\nexport default Details\n","import React from 'react'\nimport { useHistory } from 'react-router-dom'\nimport Card from '@material-ui/core/Card'\nimport CardContent from '@material-ui/core/CardContent'\nimport CardMedia from '@material-ui/core/CardMedia'\nimport Typography from '@material-ui/core/Typography'\n\nimport {\n  makeStyles,\n  createStyles,\n  Theme\n} from '@material-ui/core/styles'\n\nimport iconRefs from '../../../accuIcons'\n\n\nconst useStyles = makeStyles( ( theme: Theme ) =>\n  createStyles( {\n    favoriteCard: {\n      margin: theme.spacing( 1 ),\n      cursor: 'pointer'\n    },\n    favoriteCardContent: {\n      textAlign: 'center',\n      padding: theme.spacing( 2 ),\n      '&:last-child': {\n        paddingBottom: theme.spacing( 2 )\n      }\n    },\n    cardMedia: {\n      width: 70,\n      height: 70\n    }\n  } )\n)\n\nconst FavoriteCard: React.FC<any> = ( { conditions, isTemperatureModeCelsius }: any ) => {\n  const classes = useStyles()\n  const history = useHistory()\n\n  const handleFavoriteCardClick = () => {\n    history.push( '/', conditions )\n  }\n\n  return (\n    <Card className={ classes.favoriteCard } onClick={ handleFavoriteCardClick }>\n      <CardContent className={ classes.favoriteCardContent }>\n        <Typography variant=\"h6\">\n          { conditions.LocalizedName }\n        </Typography>\n        <CardMedia\n          className={ classes.cardMedia }\n          component=\"img\"\n          alt=\"Some img\"\n          // @ts-ignore\n          image={ iconRefs[conditions.WeatherIcon] }\n          title=\"Some img\"\n        />\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n          {\n            isTemperatureModeCelsius\n              ? `${conditions.Temperature.Metric.Value} C`\n              : `${conditions.Temperature.Metric.ValueF} F`\n          }\n        </Typography>\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n          { conditions.WeatherText }\n        </Typography>\n      </CardContent>\n    </Card>\n  )\n}\n\nexport default FavoriteCard\n","import React, { useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport Grid from '@material-ui/core/Grid'\n\nimport FavoriteCard from './components/FavoriteCard'\n\nimport {\n  makeStyles,\n  createStyles,\n  Theme\n} from '@material-ui/core/styles'\n\nimport { getLocationsConditions } from './actions'\n\n\nconst useStyles = makeStyles( ( theme: Theme ) =>\n  createStyles( {\n    favoritesContainer: {\n      flexGrow: 1,\n      padding: theme.spacing( 2 )\n    }\n  } )\n)\n\nconst Favorites: React.FC = () => {\n  const classes = useStyles()\n  const {\n    isTemperatureModeCelsius,\n    favorites\n  } = useSelector( ( { favorites, common }: any ) => ( {\n    isTemperatureModeCelsius: common.isTemperatureModeCelsius,\n    favorites\n  } ) )\n  const dispatch = useDispatch()\n\n  useEffect( () => {\n    const getLocationsData = () => {\n      const locationsData = localStorage.getItem( 'locationsData' )\n      if ( locationsData ) {\n        let parsedData: any[] = JSON.parse( locationsData )\n        dispatch( getLocationsConditions( parsedData, { isTemperatureModeCelsius } ) )\n      }\n    }\n\n    getLocationsData()\n  }, [] )\n\n  return (\n    favorites.data ? (\n      <Grid className={ classes.favoritesContainer } container justify=\"center\">\n        {\n          favorites.data.map( ( conditions: any ) => (\n            <FavoriteCard\n              key={ conditions.LocalizedName }\n              conditions={ conditions }\n              isTemperatureModeCelsius={ isTemperatureModeCelsius }\n            />\n          ) )\n        }\n      </Grid>\n    ) : null\n  )\n}\n\nexport default Favorites\n","import * as favoritesTypes from '../constants'\n\n\nexport function getLocationsConditions( payload: any, meta: any ) {\n  return {\n    type: favoritesTypes.GET_LOCATIONS_CONDITIONS_TRIGGER,\n    payload,\n    meta\n  }\n}\n","import React from 'react'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from 'react-router-dom'\nimport { Provider } from 'react-redux'\n\nimport { configureStore } from './config/configureStore'\nimport { runSaga } from './config/combineMiddlewares'\n\nimport Header from './common/components/Header'\nimport Details from './details'\nimport Favorites from './favorites'\n\nimport './App.css'\n\n\nconst store = configureStore()\nrunSaga()\n\nconst App: React.FC = () => {\n  return (\n    <Router>\n      <Provider store={ store }>\n        <Header />\n        <Switch>\n          <Route exact path=\"/\" component={ Details } />\n          <Route path=\"/favorites\" component={ Favorites } />\n        </Switch>\n      </Provider>\n    </Router>\n  )\n}\n\nexport default App\n","import {\n  createStore,\n  applyMiddleware\n} from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\n\n\nimport rootReducer from './combineReducers'\nimport middlewares from './combineMiddlewares'\n\n\nexport function configureStore ( initialState = {} ) {\n  return createStore(\n    rootReducer,\n    initialState,\n    composeWithDevTools( applyMiddleware( ...middlewares ) )\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: ( registration: ServiceWorkerRegistration ) => void;\n  onUpdate?: ( registration: ServiceWorkerRegistration ) => void;\n};\n\nexport function register( config?: Config ) {\n  if ( process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator ) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      ( process as { env: { [key: string]: string } } ).env.PUBLIC_URL,\n      window.location.href\n    )\n    if ( publicUrl.origin !== window.location.origin ) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener( 'load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if ( isLocalhost ) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker( swUrl, config )\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then( () => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        } )\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW( swUrl, config )\n      }\n    } )\n  }\n}\n\nfunction registerValidSW( swUrl: string, config?: Config ) {\n  navigator.serviceWorker\n    .register( swUrl )\n    .then( registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if ( installingWorker == null ) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if ( installingWorker.state === 'installed' ) {\n            if ( navigator.serviceWorker.controller ) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if ( config && config.onUpdate ) {\n                config.onUpdate( registration )\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log( 'Content is cached for offline use.' )\n\n              // Execute callback\n              if ( config && config.onSuccess ) {\n                config.onSuccess( registration )\n              }\n            }\n          }\n        }\n      }\n    } )\n    .catch( error => {\n      console.error( 'Error during service worker registration:', error )\n    } )\n}\n\nfunction checkValidServiceWorker( swUrl: string, config?: Config ) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch( swUrl )\n    .then( response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get( 'content-type' )\n      if (\n        response.status === 404 ||\n        ( contentType != null && contentType.indexOf( 'javascript' ) === -1 )\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then( registration => {\n          registration.unregister().then( () => {\n            window.location.reload()\n          } )\n        } )\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW( swUrl, config )\n      }\n    } )\n    .catch( () => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    } )\n}\n\nexport function unregister() {\n  if ( 'serviceWorker' in navigator ) {\n    navigator.serviceWorker.ready.then( registration => {\n      registration.unregister()\n    } )\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render( <App />, document.getElementById( 'root' ) )\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}