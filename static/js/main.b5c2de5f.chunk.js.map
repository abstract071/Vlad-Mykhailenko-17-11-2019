{"version":3,"sources":["actionTypePrefixes.ts","details/constants/index.ts","details/reducers/currentLocation.ts","details/reducers/forecast.ts","details/reducers/conditions.ts","details/reducers/index.ts","favorites/constants/index.ts","favorites/reducers/index.ts","config/combineReducers.ts","config/api.ts","details/actions/index.ts","details/sagas/index.ts","favorites/sagas/index.ts","config/combineSagas.ts","config/combineMiddlewares.ts","common/components/Header/Header.tsx","details/components/DailyWeatherCard/DailyWeatherCard.tsx","details/components/WeatherDetails/WeatherDetails.tsx","details/index.tsx","favorites/components/FavoriteCard/FavoriteCard.tsx","favorites/index.tsx","favorites/actions/index.ts","App.tsx","config/configureStore.ts","serviceWorker.ts","index.tsx","assets/weather.jpg"],"names":["NAMESPACE","SET_CURRENT_LOCATION","PREFIXES","CLEAR","GET_CURRENT_LOCATION_TRIGGER","GET_CURRENT_LOCATION_REQUEST","GET_CURRENT_LOCATION_SUCCESS","GET_CURRENT_LOCATION_FAILURE","GET_CURRENT_LOCATION_FULFILL","GET_FORECAST_TRIGGER","GET_FORECAST_REQUEST","GET_FORECAST_SUCCESS","GET_FORECAST_FAILURE","GET_FORECAST_FULFILL","GET_CONDITIONS_TRIGGER","GET_CONDITIONS_REQUEST","GET_CONDITIONS_SUCCESS","GET_CONDITIONS_FAILURE","GET_CONDITIONS_FULFILL","INITIAL_STATE","error","isLoading","data","weatherDetailsReducer","combineReducers","currentLocation","state","action","type","weatherDetailsTypes","payload","detail","forecast","conditions","GET_LOCATIONS_CONDITIONS_TRIGGER","GET_LOCATIONS_CONDITIONS_REQUEST","GET_LOCATIONS_CONDITIONS_SUCCESS","GET_LOCATIONS_CONDITIONS_FAILURE","GET_LOCATIONS_CONDITIONS_FULFILL","weatherDetails","favorites","favoritesTypes","ACCU_WEATHER_API_URL","api","autocomplete","locationByKey","locationKey","forecast5days","getForecast","getConditions","getCurrentLocationSaga","watchGettingCurrentLocationSaga","getForecastSaga","watchGettingForecastSaga","getConditionsSaga","watchGettingConditionsSaga","put","config","params","apikey","process","language","call","axios","get","key","response","Key","takeLatest","metric","getLocationsConditionsSaga","watchGettingLocationsConditionsSaga","allArgs","reduce","acc","cur","locationName","all","responses","transformedResponses","map","rootSaga","weatherDetailsSagaWatchers","favoritesSagaWatchers","sagaMiddleware","createSagaMiddleware","middlewares","ForwardedLink","React","forwardRef","props","ref","innerRef","useStyles","makeStyles","theme","createStyles","headerRoot","flexGrow","menuButton","marginRight","spacing","title","iconButton","Header","classes","className","AppBar","position","Toolbar","Typography","variant","IconButton","disabled","ButtonGroup","color","size","Button","component","to","dailyForecastCardContent","textAlign","padding","paddingBottom","DailyWeatherCard","Card","CardContent","moment","Date","format","Temperature","Minimum","Value","Maximum","weatherDetailsRoot","minHeight","weatherDetailsContainer","height","weatherDetailsGridItem","maxWidth","cardRoot","display","cardMedia","width","cardContent","WeatherDetails","Paper","Grid","container","direction","item","xs","justify","CardMedia","alt","image","weatherImg","LocalizedName","Metric","Box","startIcon","onClick","locationsData","localStorage","getItem","dataToSave","parsedData","JSON","parse","push","setItem","stringify","alignItems","WeatherText","dayForecast","index","defaultLocation","detailsRoot","autocompleteContainer","paddingTop","icon","palette","text","secondary","Details","useState","inputValue","setInputValue","options","setOptions","currentLocationState","useSelector","forecastState","conditionsState","dispatch","useDispatch","useEffect","active","fetch","throttle","input","cb","a","q","console","log","handleChange","event","target","value","Autocomplete","id","defaultValue","getOptionLabel","option","filterOptions","autoComplete","includeInputInList","freeSolo","disableOpenOnFocus","onChange","renderInput","TextField","label","fullWidth","renderOption","DailyForecasts","favoriteCard","margin","favoriteCardContent","FavoriteCard","favoritesContainer","Favorites","favoritesState","getLocationsData","store","initialState","createStore","rootReducer","composeWithDevTools","applyMiddleware","configureStore","run","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.b5c2de5f.chunk.js","sourcesContent":["export default {\n  TRIGGER: 'TRIGGER',\n  REQUEST: 'REQUEST',\n  SUCCESS: 'SUCCESS',\n  FAILURE: 'FAILURE',\n  FULFILL: 'FULFILL'\n}\n","import PREFIXES from '../../actionTypePrefixes'\n\nconst NAMESPACE = 'WEATHER_DETAILS'\n\nexport const SET_CURRENT_LOCATION = `${PREFIXES.TRIGGER}/${NAMESPACE}:SET_CURRENT_LOCATION`\nexport const CLEAR = `${PREFIXES.TRIGGER}/${NAMESPACE}:CLEAR`\n\nexport const GET_CURRENT_LOCATION_TRIGGER = `${PREFIXES.TRIGGER}/${NAMESPACE}:GET_CURRENT_LOCATION`\nexport const GET_CURRENT_LOCATION_REQUEST = `${PREFIXES.REQUEST}/${NAMESPACE}:GET_CURRENT_LOCATION`\nexport const GET_CURRENT_LOCATION_SUCCESS = `${PREFIXES.SUCCESS}/${NAMESPACE}:GET_CURRENT_LOCATION`\nexport const GET_CURRENT_LOCATION_FAILURE = `${PREFIXES.FAILURE}/${NAMESPACE}:GET_CURRENT_LOCATION`\nexport const GET_CURRENT_LOCATION_FULFILL = `${PREFIXES.FULFILL}/${NAMESPACE}:GET_CURRENT_LOCATION`\n\nexport const GET_FORECAST_TRIGGER = `${PREFIXES.TRIGGER}/${NAMESPACE}:GET_FORECAST`\nexport const GET_FORECAST_REQUEST = `${PREFIXES.REQUEST}/${NAMESPACE}:GET_FORECAST`\nexport const GET_FORECAST_SUCCESS = `${PREFIXES.SUCCESS}/${NAMESPACE}:GET_FORECAST`\nexport const GET_FORECAST_FAILURE = `${PREFIXES.FAILURE}/${NAMESPACE}:GET_FORECAST`\nexport const GET_FORECAST_FULFILL = `${PREFIXES.FULFILL}/${NAMESPACE}:GET_FORECAST`\n\nexport const GET_CONDITIONS_TRIGGER = `${PREFIXES.TRIGGER}/${NAMESPACE}:GET_CONDITIONS`\nexport const GET_CONDITIONS_REQUEST = `${PREFIXES.REQUEST}/${NAMESPACE}:GET_CONDITIONS`\nexport const GET_CONDITIONS_SUCCESS = `${PREFIXES.SUCCESS}/${NAMESPACE}:GET_CONDITIONS`\nexport const GET_CONDITIONS_FAILURE = `${PREFIXES.FAILURE}/${NAMESPACE}:GET_CONDITIONS`\nexport const GET_CONDITIONS_FULFILL = `${PREFIXES.FULFILL}/${NAMESPACE}:GET_CONDITIONS`\n","import * as weatherDetailsTypes from '../constants'\n\n\ntype StateType = {\n  error: null | string\n  isLoading: boolean\n  data: any\n}\n\nconst INITIAL_STATE = {\n  error: null,\n  isLoading: true,\n  data: null\n}\n\ntype ActionType = {\n  type: string\n  payload: any\n}\n\nexport const currentLocationReducer = ( state: StateType = INITIAL_STATE, action: ActionType ): StateType => {\n  switch ( action.type ) {\n    case weatherDetailsTypes.GET_CURRENT_LOCATION_REQUEST:\n      return {\n        ...state,\n        isLoading: true\n      }\n    case weatherDetailsTypes.GET_CURRENT_LOCATION_SUCCESS:\n      return {\n        ...state,\n        data: action.payload,\n        error: null\n      }\n    case weatherDetailsTypes.GET_CURRENT_LOCATION_FAILURE:\n      return {\n        ...state,\n        error: action.payload.detail\n      }\n    case weatherDetailsTypes.GET_CURRENT_LOCATION_FULFILL:\n      return {\n        ...state,\n        isLoading: false\n      }\n    case weatherDetailsTypes.SET_CURRENT_LOCATION:\n      return {\n        ...state,\n        isLoading: false,\n        data: action.payload,\n        error: null\n      }\n    case weatherDetailsTypes.CLEAR:\n      return {\n        ...INITIAL_STATE\n      }\n    default:\n      return state\n  }\n}\n","import * as weatherDetailsTypes from '../constants'\n\n\ntype StateType = {\n  error: null | string\n  isLoading: boolean\n  data: any\n}\n\nconst INITIAL_STATE = {\n  error: null,\n  isLoading: true,\n  data: null\n}\n\ntype ActionType = {\n  type: string\n  payload: any\n}\n\nexport const forecastReducer = ( state: StateType = INITIAL_STATE, action: ActionType ): StateType => {\n  switch ( action.type ) {\n    case weatherDetailsTypes.GET_FORECAST_REQUEST:\n      return {\n        ...state,\n        isLoading: true\n      }\n    case weatherDetailsTypes.GET_FORECAST_SUCCESS:\n      return {\n        ...state,\n        data: action.payload,\n        error: null\n      }\n    case weatherDetailsTypes.GET_FORECAST_FAILURE:\n      return {\n        ...state,\n        error: action.payload.detail\n      }\n    case weatherDetailsTypes.GET_FORECAST_FULFILL:\n      return {\n        ...state,\n        isLoading: false\n      }\n    case weatherDetailsTypes.CLEAR:\n      return {\n        ...INITIAL_STATE\n      }\n    default:\n      return state\n  }\n}\n","import * as weatherDetailsTypes from '../constants'\n\n\ntype StateType = {\n  error: null | string\n  isLoading: boolean\n  data: any\n}\n\nconst INITIAL_STATE = {\n  error: null,\n  isLoading: true,\n  data: null\n}\n\ntype ActionType = {\n  type: string\n  payload: any\n}\n\nexport const conditionsReducer = ( state: StateType = INITIAL_STATE, action: ActionType ): StateType => {\n  switch ( action.type ) {\n    case weatherDetailsTypes.GET_CONDITIONS_REQUEST:\n      return {\n        ...state,\n        isLoading: true\n      }\n    case weatherDetailsTypes.GET_CONDITIONS_SUCCESS:\n      return {\n        ...state,\n        data: action.payload,\n        error: null\n      }\n    case weatherDetailsTypes.GET_CONDITIONS_FAILURE:\n      return {\n        ...state,\n        error: action.payload.detail\n      }\n    case weatherDetailsTypes.GET_CONDITIONS_FULFILL:\n      return {\n        ...state,\n        isLoading: false\n      }\n    case weatherDetailsTypes.CLEAR:\n      return {\n        ...INITIAL_STATE\n      }\n    default:\n      return state\n  }\n}\n","import { combineReducers } from 'redux'\n\nimport { currentLocationReducer } from './currentLocation'\nimport { forecastReducer } from './forecast'\nimport { conditionsReducer } from './conditions'\n\n\nexport const weatherDetailsReducer = combineReducers( {\n  currentLocation: currentLocationReducer,\n  forecast: forecastReducer,\n  conditions: conditionsReducer\n} )\n","import PREFIXES from '../../actionTypePrefixes'\n\nconst NAMESPACE = 'FAVORITES'\n\nexport const GET_LOCATIONS_CONDITIONS_TRIGGER = `${PREFIXES.TRIGGER}/${NAMESPACE}:GET_LOCATIONS_CONDITIONS`\nexport const GET_LOCATIONS_CONDITIONS_REQUEST = `${PREFIXES.REQUEST}/${NAMESPACE}:GET_LOCATIONS_CONDITIONS`\nexport const GET_LOCATIONS_CONDITIONS_SUCCESS = `${PREFIXES.SUCCESS}/${NAMESPACE}:GET_LOCATIONS_CONDITIONS`\nexport const GET_LOCATIONS_CONDITIONS_FAILURE = `${PREFIXES.FAILURE}/${NAMESPACE}:GET_LOCATIONS_CONDITIONS`\nexport const GET_LOCATIONS_CONDITIONS_FULFILL = `${PREFIXES.FULFILL}/${NAMESPACE}:GET_LOCATIONS_CONDITIONS`\n","import * as favoritesTypes from '../constants'\n\n\ntype StateType = {\n  error: null | string\n  isLoading: boolean\n  data: any\n}\n\nconst INITIAL_STATE = {\n  error: null,\n  isLoading: true,\n  data: null\n}\n\ntype ActionType = {\n  type: string\n  payload: any\n}\n\nexport const favoritesReducer = ( state: StateType = INITIAL_STATE, action: ActionType ): StateType => {\n  switch ( action.type ) {\n    case favoritesTypes.GET_LOCATIONS_CONDITIONS_REQUEST:\n      return {\n        ...state,\n        isLoading: true\n      }\n    case favoritesTypes.GET_LOCATIONS_CONDITIONS_SUCCESS:\n      return {\n        ...state,\n        data: action.payload,\n        error: null\n      }\n    case favoritesTypes.GET_LOCATIONS_CONDITIONS_FAILURE:\n      return {\n        ...state,\n        error: action.payload.detail\n      }\n    case favoritesTypes.GET_LOCATIONS_CONDITIONS_FULFILL:\n      return {\n        ...state,\n        isLoading: false\n      }\n    default:\n      return state\n  }\n}\n","import { combineReducers } from 'redux'\n\nimport { weatherDetailsReducer } from '../details/reducers'\nimport { favoritesReducer } from '../favorites/reducers'\n\n\nexport default combineReducers( {\n  weatherDetails: weatherDetailsReducer,\n  favorites: favoritesReducer\n} )\n","const ACCU_WEATHER_API_URL = 'https://dataservice.accuweather.com'\n\nexport const api = {\n  autocomplete: `${ACCU_WEATHER_API_URL}/locations/v1/cities/autocomplete`,\n  locationByKey: ( locationKey: string ) => `${ACCU_WEATHER_API_URL}/locations/v1/${locationKey}`,\n  forecast5days: ( locationKey: string ) => `${ACCU_WEATHER_API_URL}/forecasts/v1/daily/5day/${locationKey}`,\n  conditions: ( locationKey: string ) => `${ACCU_WEATHER_API_URL}/currentconditions/v1/${locationKey}`\n}\n","import * as weatherDetailsTypes from '../constants'\n\n\nexport function getCurrentLocation( payload: any ) {\n  return {\n    type: weatherDetailsTypes.GET_CURRENT_LOCATION_TRIGGER,\n    payload\n  }\n}\n\nexport function setCurrentLocation( payload: any ) {\n  return {\n    type: weatherDetailsTypes.SET_CURRENT_LOCATION,\n    payload\n  }\n}\n\nexport function getForecast( payload: any ) {\n  return {\n    type: weatherDetailsTypes.GET_FORECAST_TRIGGER,\n    payload\n  }\n}\n\nexport function getConditions( payload: any ) {\n  return {\n    type: weatherDetailsTypes.GET_CONDITIONS_TRIGGER,\n    payload\n  }\n}\n\nexport function clear() {\n  return {\n    type: weatherDetailsTypes.CLEAR\n  }\n}\n","import {\n  put,\n  call,\n  takeLatest\n} from 'redux-saga/effects'\nimport axios from 'axios'\n\nimport { api } from '../../config/api'\n\nimport * as weatherDetailsTypes from '../constants'\n\nimport {\n  getConditions,\n  getForecast\n} from '../actions'\n\n\nexport function* getCurrentLocationSaga( action: any ) {\n  try {\n    yield put( { type: weatherDetailsTypes.GET_CURRENT_LOCATION_REQUEST } )\n    const config = {\n      params: {\n        apikey: process.env.REACT_APP_ACCU_WEATHER_KEY,\n        language: 'en-us'\n      }\n    }\n    const response = yield call( axios.get, api.locationByKey( action.payload.key ), config )\n    yield put( { type: weatherDetailsTypes.GET_CURRENT_LOCATION_SUCCESS, payload: response.data } )\n\n    yield put( getForecast( { key: response.data.Key } ) )\n    yield put( getConditions( { key: response.data.Key } ) )\n  } catch ( error ) {\n    if ( error.response ) {\n      yield put( { type: weatherDetailsTypes.GET_CURRENT_LOCATION_FAILURE, payload: error.response.data } )\n    }\n  } finally {\n    yield put( { type: weatherDetailsTypes.GET_CURRENT_LOCATION_FULFILL } )\n  }\n}\n\nexport function* watchGettingCurrentLocationSaga() {\n  yield takeLatest( weatherDetailsTypes.GET_CURRENT_LOCATION_TRIGGER, getCurrentLocationSaga )\n}\n\nexport function* getForecastSaga( action: any ) {\n  try {\n    yield put( { type: weatherDetailsTypes.GET_FORECAST_REQUEST } )\n    const config = {\n      params: {\n        apikey: process.env.REACT_APP_ACCU_WEATHER_KEY,\n        language: 'en-us',\n        metric: true\n      }\n    }\n    const response = yield call( axios.get, api.forecast5days( action.payload.key ), config )\n    yield put( { type: weatherDetailsTypes.GET_FORECAST_SUCCESS, payload: response.data } )\n  } catch ( error ) {\n    if ( error.response ) {\n      yield put( { type: weatherDetailsTypes.GET_FORECAST_FAILURE, payload: error.response.data } )\n    }\n  } finally {\n    yield put( { type: weatherDetailsTypes.GET_FORECAST_FULFILL } )\n  }\n}\n\nexport function* watchGettingForecastSaga() {\n  yield takeLatest( weatherDetailsTypes.GET_FORECAST_TRIGGER, getForecastSaga )\n}\n\nexport function* getConditionsSaga( action: any ) {\n  try {\n    yield put( { type: weatherDetailsTypes.GET_CONDITIONS_REQUEST } )\n    const config = {\n      params: {\n        apikey: process.env.REACT_APP_ACCU_WEATHER_KEY,\n        language: 'en-us'\n      }\n    }\n    const response = yield call( axios.get, api.conditions( action.payload.key ), config )\n    yield put( { type: weatherDetailsTypes.GET_CONDITIONS_SUCCESS, payload: response.data[0] } )\n  } catch ( error ) {\n    if ( error.response ) {\n      yield put( { type: weatherDetailsTypes.GET_CONDITIONS_FAILURE, payload: error.response.data } )\n    }\n  } finally {\n    yield put( { type: weatherDetailsTypes.GET_CONDITIONS_FULFILL } )\n  }\n}\n\nexport function* watchGettingConditionsSaga() {\n  yield takeLatest( weatherDetailsTypes.GET_CONDITIONS_TRIGGER, getConditionsSaga )\n}\n\nexport default [\n  watchGettingCurrentLocationSaga(),\n  watchGettingForecastSaga(),\n  watchGettingConditionsSaga()\n]\n","import {\n  put,\n  call,\n  all,\n  takeLatest\n} from 'redux-saga/effects'\nimport axios from 'axios'\n\nimport { api } from '../../config/api'\n\nimport * as favoritesTypes from '../constants'\n\n\nexport function* getLocationsConditionsSaga( action: any ) {\n  try {\n    yield put( { type: favoritesTypes.GET_LOCATIONS_CONDITIONS_REQUEST } )\n    const config = {\n      params: {\n        apikey: process.env.REACT_APP_ACCU_WEATHER_KEY,\n        language: 'en-us'\n      }\n    }\n    const allArgs = action.payload.reduce( ( acc: any, cur: any ) => ( { ...acc, [cur.locationName]: call( axios.get, api.conditions( cur.locationKey ), config ) } ), {} )\n    const responses = yield all( allArgs )\n    const transformedResponses = action.payload.map( ( { locationName }: any ) => ( { locationName, ...responses[locationName].data[0] } ) )\n    yield put( { type: favoritesTypes.GET_LOCATIONS_CONDITIONS_SUCCESS, payload: transformedResponses } )\n  } catch ( error ) {\n    if ( error.response ) {\n      yield put( { type: favoritesTypes.GET_LOCATIONS_CONDITIONS_FAILURE, payload: error.response.data } )\n    }\n  } finally {\n    yield put( { type: favoritesTypes.GET_LOCATIONS_CONDITIONS_FULFILL } )\n  }\n}\n\nexport function* watchGettingLocationsConditionsSaga() {\n  yield takeLatest( favoritesTypes.GET_LOCATIONS_CONDITIONS_TRIGGER, getLocationsConditionsSaga )\n}\n\nexport default [\n  watchGettingLocationsConditionsSaga()\n]\n","import { all } from 'redux-saga/effects'\n\nimport weatherDetailsSagaWatchers from '../details/sagas'\nimport favoritesSagaWatchers from '../favorites/sagas'\n\n\nexport default function* rootSaga() {\n  yield all( [\n    ...weatherDetailsSagaWatchers,\n    ...favoritesSagaWatchers\n  ] )\n}\n","import createSagaMiddleware from 'redux-saga'\n\nimport rootSaga from './combineSagas'\n\n\nconst sagaMiddleware = createSagaMiddleware()\nlet middlewares = [ sagaMiddleware ]\n\nexport const runSaga = () => sagaMiddleware.run( rootSaga )\n\nexport default middlewares\n","import React from 'react'\nimport { Link, LinkProps } from 'react-router-dom'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\nimport Button from '@material-ui/core/Button'\nimport ButtonGroup from '@material-ui/core/ButtonGroup'\nimport IconButton from '@material-ui/core/IconButton'\nimport Brightness6TwoToneIcon from '@material-ui/icons/Brightness6TwoTone'\nimport AcUnitTwoToneIcon from '@material-ui/icons/AcUnitTwoTone'\n\nimport {\n  createStyles,\n  makeStyles,\n  Theme\n} from '@material-ui/core/styles'\n\n\nconst ForwardedLink = React.forwardRef<HTMLAnchorElement, LinkProps>( ( props, ref ) => (\n  <Link innerRef={ ref } { ...props } />\n) )\n\nconst useStyles = makeStyles( ( theme: Theme ) =>\n  createStyles( {\n    headerRoot: {\n      flexGrow: 1\n    },\n    menuButton: {\n      marginRight: theme.spacing( 2 )\n    },\n    title: {\n      flexGrow: 1\n    },\n    iconButton: {\n      marginRight: theme.spacing( 1 )\n    }\n  } ),\n)\n\nconst Header: React.FC = () => {\n  const classes = useStyles()\n\n  return (\n    <div className={ classes.headerRoot }>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={ classes.title }>\n            Herolo Weather Task\n          </Typography>\n          <IconButton disabled className={ classes.iconButton }>\n            <Brightness6TwoToneIcon />\n          </IconButton>\n          <IconButton disabled className={ classes.iconButton }>\n            <AcUnitTwoToneIcon />\n          </IconButton>\n          <ButtonGroup\n            variant=\"contained\"\n            color=\"primary\"\n            size=\"large\"\n          >\n            <Button component={ ForwardedLink } to=\"/\">\n              Home\n            </Button>\n            <Button component={ ForwardedLink } to=\"/favorites\">\n              Favorites\n            </Button>\n          </ButtonGroup>\n        </Toolbar>\n      </AppBar>\n    </div>\n  )\n}\n\nexport default Header\n","import React from 'react'\nimport Card from '@material-ui/core/Card'\nimport CardContent from '@material-ui/core/CardContent'\nimport Typography from '@material-ui/core/Typography'\n\nimport moment from 'moment'\n\nimport {\n  makeStyles,\n  createStyles,\n  Theme\n} from '@material-ui/core/styles'\n\n\nconst useStyles = makeStyles( ( theme: Theme ) =>\n  createStyles( {\n    dailyForecastCardContent: {\n      textAlign: 'center',\n      padding: theme.spacing( 2 ),\n      '&:last-child': {\n        paddingBottom: theme.spacing( 2 )\n      }\n    }\n  } )\n)\n\nconst DailyWeatherCard: React.FC<any> = ( { forecast }: any ) => {\n  const classes = useStyles()\n\n  return (\n    <Card>\n      <CardContent className={ classes.dailyForecastCardContent }>\n        <Typography variant=\"h6\">\n          { moment( forecast.Date ).format( 'ddd' ) }\n        </Typography>\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n          { `${forecast.Temperature.Minimum.Value} - ${forecast.Temperature.Maximum.Value} C` }\n        </Typography>\n      </CardContent>\n    </Card>\n  )\n}\n\nexport default DailyWeatherCard\n","import React from 'react'\nimport Paper from '@material-ui/core/Paper'\nimport Grid from '@material-ui/core/Grid'\nimport Box from '@material-ui/core/Box'\nimport Card from '@material-ui/core/Card'\nimport CardMedia from '@material-ui/core/CardMedia'\nimport CardContent from '@material-ui/core/CardContent'\nimport Typography from '@material-ui/core/Typography'\nimport Button from '@material-ui/core/Button'\nimport FavoriteIcon from '@material-ui/icons/Favorite'\n\nimport DailyWeatherCard from '../DailyWeatherCard'\n\nimport {\n  makeStyles,\n  createStyles,\n  Theme\n} from '@material-ui/core/styles'\n\nimport weatherImg from '../../../assets/weather.jpg'\n\n\nconst useStyles = makeStyles( ( theme: Theme ) =>\n  createStyles( {\n    weatherDetailsRoot: {\n      minHeight: 300\n    },\n    weatherDetailsContainer: {\n      height: '100%'\n    },\n    weatherDetailsGridItem: {\n      padding: theme.spacing( 2 ),\n      maxWidth: '100%'\n    },\n    cardRoot: {\n      display: 'flex'\n    },\n    cardMedia: {\n      width: 70,\n      height: 70\n    },\n    cardContent: {\n      padding: theme.spacing( 1 ),\n      '&:last-child': {\n        paddingBottom: theme.spacing( 1 )\n      }\n    }\n  } )\n)\n\nconst WeatherDetails: React.FC<any> = ( {\n  currentLocation,\n  forecast,\n  conditions\n}: any ) => {\n  const classes = useStyles()\n\n  const handleAddToFavoritesClick = () => {\n    const locationsData = localStorage.getItem( 'locationsData' )\n    const dataToSave = {\n      locationName: currentLocation.LocalizedName,\n      locationKey: currentLocation.Key\n    }\n    if ( locationsData ) {\n      let parsedData: any[] = JSON.parse( locationsData )\n      parsedData.push( dataToSave )\n      localStorage.setItem( 'locationsData', JSON.stringify( parsedData ) )\n    } else {\n      localStorage.setItem( 'locationsData', JSON.stringify( [dataToSave] ) )\n    }\n  }\n\n  return (\n    <Paper className={ classes.weatherDetailsRoot }>\n      <Grid className={ classes.weatherDetailsContainer } container direction=\"column\">\n        <Grid className={ classes.weatherDetailsGridItem } item container xs={ 3 } justify=\"space-between\">\n          <Card className={ classes.cardRoot }>\n            <CardMedia\n              className={ classes.cardMedia }\n              component=\"img\"\n              alt=\"Some img\"\n              image={ weatherImg }\n              title=\"Some img\"\n            />\n            <CardContent className={ classes.cardContent }>\n              <Typography variant=\"h6\">\n                { currentLocation.LocalizedName }\n              </Typography>\n              <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                { `${conditions.Temperature.Metric.Value} C` }\n              </Typography>\n            </CardContent>\n          </Card>\n          <Box>\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              size=\"large\"\n              startIcon={ <FavoriteIcon /> }\n              onClick={ handleAddToFavoritesClick }\n            >\n              Add to Favorites\n            </Button>\n          </Box>\n        </Grid>\n        <Grid className={ classes.weatherDetailsGridItem } item container xs={ 4 } justify=\"center\" alignItems=\"center\">\n          <Typography variant=\"h3\">\n            { conditions.WeatherText }\n          </Typography>\n        </Grid>\n        <Grid className={ classes.weatherDetailsGridItem } item container xs={ 5 } justify=\"space-around\" alignItems=\"center\">\n          {\n            forecast.map( ( dayForecast: any, index: number ) => (\n              <DailyWeatherCard\n                key={ `forecast_${index}` }\n                forecast={ dayForecast }\n              />\n            ) )\n          }\n        </Grid>\n      </Grid>\n    </Paper>\n  )\n}\n\nexport default WeatherDetails\n","import React, { useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport TextField from '@material-ui/core/TextField'\nimport Autocomplete from '@material-ui/lab/Autocomplete'\nimport LocationOnIcon from '@material-ui/icons/LocationOn'\nimport Typography from '@material-ui/core/Typography'\nimport Grid from '@material-ui/core/Grid'\n\nimport WeatherDetails from './components/WeatherDetails'\n\nimport throttle from 'lodash/throttle'\n\nimport {\n  getCurrentLocation,\n  setCurrentLocation,\n  getForecast,\n  getConditions,\n  clear\n} from './actions'\n\nimport { api } from '../config/api'\n\nimport axios from 'axios'\n\nimport {\n  makeStyles,\n  createStyles,\n  Theme\n} from '@material-ui/core/styles'\n\n\nconst defaultLocation = { LocalizedName: 'Tel Aviv', Key: 215854 }\n\nconst useStyles = makeStyles( ( theme: Theme ) =>\n  createStyles( {\n    detailsRoot: {\n      flexGrow: 1\n    },\n    autocompleteContainer: {\n      paddingTop: theme.spacing( 3 ),\n      paddingBottom: theme.spacing( 3 )\n    },\n    icon: {\n      color: theme.palette.text.secondary,\n      marginRight: theme.spacing( 2 )\n    }\n  } )\n)\n\ninterface PlaceType {}\n\nconst Details: React.FC = () => {\n  const classes = useStyles()\n  const [inputValue, setInputValue] = React.useState( '' )\n  const [options, setOptions] = React.useState<PlaceType[]>( [] )\n  const currentLocationState = useSelector( ( { weatherDetails }: any ) => weatherDetails.currentLocation )\n  const forecastState = useSelector( ( { weatherDetails }: any ) => weatherDetails.forecast )\n  const conditionsState = useSelector( ( { weatherDetails }: any ) => weatherDetails.conditions )\n  const dispatch = useDispatch()\n\n  useEffect( () => {\n    dispatch( getCurrentLocation( { key: defaultLocation.Key } ) )\n  }, [] )\n\n  useEffect( () => {\n    let active = true\n\n    const fetch = throttle( async ( input: string, cb: ( response: any ) => void ) => {\n      try {\n        const response = await axios.get( api.autocomplete, {\n          params: {\n            apikey: process.env.REACT_APP_ACCU_WEATHER_KEY,\n            q: input,\n            language: 'en-us'\n          }\n        } )\n        cb( response )\n      } catch ( e ) {\n        console.log( e )\n      }\n    }, 200 )\n\n    if ( inputValue === '' ) {\n      setOptions( [] )\n      return\n    }\n\n    fetch( inputValue, ( response: any ) => {\n      if ( active ) {\n        setOptions( response.data || [] )\n      }\n    } )\n\n    return () => {\n      active = false\n    }\n  }, [inputValue] )\n\n  const handleChange = ( event: React.ChangeEvent<HTMLInputElement> ) => {\n    setInputValue( event.target.value )\n  }\n\n  const handleCityAccept = ( event: any, option: any ): void => {\n    if ( option ) {\n      dispatch( setCurrentLocation( option ) )\n      dispatch( getForecast( { key: option.Key } ) )\n      dispatch( getConditions( { key: option.Key } ) )\n    } else {\n      dispatch( clear() )\n    }\n  }\n\n  return (\n    <Grid container className={ classes.detailsRoot } justify=\"center\">\n      <Grid className={ classes.autocompleteContainer } item xs={ 10 }>\n        <Autocomplete\n          id=\"autocomplete\"\n          defaultValue={ defaultLocation }\n          getOptionLabel={ option => option.LocalizedName }\n          filterOptions={ options => options }\n          options={ options }\n          autoComplete\n          includeInputInList\n          freeSolo\n          disableOpenOnFocus\n          onChange={ handleCityAccept }\n          renderInput={ params => {\n            return (\n              <TextField\n                { ...params }\n                label=\"Add a location\"\n                variant=\"outlined\"\n                fullWidth\n                onChange={ handleChange }\n              />\n            )\n          } }\n          renderOption={ option => {\n            return (\n              <Grid container alignItems=\"center\">\n                <Grid item>\n                  <LocationOnIcon className={ classes.icon } />\n                </Grid>\n                <Grid item xs>\n                  <Typography variant=\"body2\" color=\"textSecondary\">\n                    { option.LocalizedName }\n                  </Typography>\n                </Grid>\n              </Grid>\n            )\n          } }\n        />\n      </Grid>\n      {\n        currentLocationState.data && forecastState.data && conditionsState.data ? (\n          <Grid item xs={ 10 }>\n            <WeatherDetails\n              currentLocation={ currentLocationState.data }\n              forecast={ forecastState.data.DailyForecasts }\n              conditions={ conditionsState.data }\n            />\n          </Grid>\n        ) : null\n      }\n    </Grid>\n  )\n}\n\nexport default Details\n","import React from 'react'\nimport Card from '@material-ui/core/Card'\nimport CardContent from '@material-ui/core/CardContent'\nimport Typography from '@material-ui/core/Typography'\n\nimport {\n  makeStyles,\n  createStyles,\n  Theme\n} from '@material-ui/core/styles'\n\n\nconst useStyles = makeStyles( ( theme: Theme ) =>\n  createStyles( {\n    favoriteCard: {\n      margin: theme.spacing( 1 )\n    },\n    favoriteCardContent: {\n      textAlign: 'center',\n      padding: theme.spacing( 2 ),\n      '&:last-child': {\n        paddingBottom: theme.spacing( 2 )\n      }\n    }\n  } )\n)\n\nconst FavoriteCard: React.FC<any> = ( { conditions }: any ) => {\n  const classes = useStyles()\n\n  return (\n    <Card className={ classes.favoriteCard }>\n      <CardContent className={ classes.favoriteCardContent }>\n        <Typography variant=\"h6\">\n          { conditions.locationName }\n        </Typography>\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n          { `${conditions.Temperature.Metric.Value} C` }\n        </Typography>\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n          { conditions.WeatherText }\n        </Typography>\n      </CardContent>\n    </Card>\n  )\n}\n\nexport default FavoriteCard\n","import React, { useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport Grid from '@material-ui/core/Grid'\n\nimport FavoriteCard from './components/FavoriteCard'\n\nimport {\n  makeStyles,\n  createStyles,\n  Theme\n} from '@material-ui/core/styles'\n\nimport { getLocationsConditions } from './actions'\n\n\nconst useStyles = makeStyles( ( theme: Theme ) =>\n  createStyles( {\n    favoritesContainer: {\n      flexGrow: 1,\n      padding: theme.spacing( 2 )\n    }\n  } )\n)\n\nconst Favorites: React.FC = () => {\n  const classes = useStyles()\n  const favoritesState = useSelector( ( { favorites }: any ) => favorites )\n  const dispatch = useDispatch()\n\n  useEffect( () => {\n    const getLocationsData = () => {\n      const locationsData = localStorage.getItem( 'locationsData' )\n      if ( locationsData ) {\n        let parsedData: any[] = JSON.parse( locationsData )\n        dispatch( getLocationsConditions( parsedData ) )\n      }\n    }\n\n    getLocationsData()\n  }, [] )\n\n  return (\n    favoritesState.data ? (\n      <Grid className={ classes.favoritesContainer } container justify=\"center\">\n        {\n          favoritesState.data.map( ( conditions: any ) => (\n            <FavoriteCard\n              key={ conditions.locationName }\n              conditions={ conditions }\n            />\n          ) )\n        }\n      </Grid>\n    ) : null\n  )\n}\n\nexport default Favorites\n","import * as favoritesTypes from '../constants'\n\n\nexport function getLocationsConditions( payload: any ) {\n  return {\n    type: favoritesTypes.GET_LOCATIONS_CONDITIONS_TRIGGER,\n    payload\n  }\n}\n","import React from 'react'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from 'react-router-dom'\nimport { Provider } from 'react-redux'\n\nimport { configureStore } from './config/configureStore'\nimport { runSaga } from './config/combineMiddlewares'\n\nimport Header from './common/components/Header'\nimport Details from './details'\nimport Favorites from './favorites'\n\nimport './App.css'\n\n\nconst store = configureStore()\nrunSaga()\n\nconst App: React.FC = () => {\n  return (\n    <Router>\n      <Provider store={ store }>\n        <Header />\n        <Switch>\n          <Route exact path=\"/\" component={ Details } />\n          <Route path=\"/favorites\" component={ Favorites } />\n        </Switch>\n      </Provider>\n    </Router>\n  )\n}\n\nexport default App\n","import {\n  createStore,\n  applyMiddleware\n} from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\n\n\nimport rootReducer from './combineReducers'\nimport middlewares from './combineMiddlewares'\n\n\nexport function configureStore ( initialState = {} ) {\n  return createStore(\n    rootReducer,\n    initialState,\n    composeWithDevTools( applyMiddleware( ...middlewares ) )\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: ( registration: ServiceWorkerRegistration ) => void;\n  onUpdate?: ( registration: ServiceWorkerRegistration ) => void;\n};\n\nexport function register( config?: Config ) {\n  if ( process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator ) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      ( process as { env: { [key: string]: string } } ).env.PUBLIC_URL,\n      window.location.href\n    )\n    if ( publicUrl.origin !== window.location.origin ) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener( 'load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if ( isLocalhost ) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker( swUrl, config )\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then( () => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        } )\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW( swUrl, config )\n      }\n    } )\n  }\n}\n\nfunction registerValidSW( swUrl: string, config?: Config ) {\n  navigator.serviceWorker\n    .register( swUrl )\n    .then( registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if ( installingWorker == null ) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if ( installingWorker.state === 'installed' ) {\n            if ( navigator.serviceWorker.controller ) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if ( config && config.onUpdate ) {\n                config.onUpdate( registration )\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log( 'Content is cached for offline use.' )\n\n              // Execute callback\n              if ( config && config.onSuccess ) {\n                config.onSuccess( registration )\n              }\n            }\n          }\n        }\n      }\n    } )\n    .catch( error => {\n      console.error( 'Error during service worker registration:', error )\n    } )\n}\n\nfunction checkValidServiceWorker( swUrl: string, config?: Config ) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch( swUrl )\n    .then( response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get( 'content-type' )\n      if (\n        response.status === 404 ||\n        ( contentType != null && contentType.indexOf( 'javascript' ) === -1 )\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then( registration => {\n          registration.unregister().then( () => {\n            window.location.reload()\n          } )\n        } )\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW( swUrl, config )\n      }\n    } )\n    .catch( () => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    } )\n}\n\nexport function unregister() {\n  if ( 'serviceWorker' in navigator ) {\n    navigator.serviceWorker.ready.then( registration => {\n      registration.unregister()\n    } )\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render( <App />, document.getElementById( 'root' ) )\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","module.exports = __webpack_public_path__ + \"static/media/weather.973322d6.jpg\";"],"sourceRoot":""}